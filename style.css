/* === 1. RESET/BASE STYLES === */
body {
    margin: 0;
    /* overflow: hidden; Removed */ /* This was an intentional change from original, keeping it as user provided */
    background-color: #222; /* Dark background */
    font-family: sans-serif;
    color: white;
    display: flex; /* Use flexbox for body */
    height: 100vh; /* Make body fill viewport height */
}

/* === 2. LAYOUT STYLES === */
#app-container { /* NEW */
    display: flex;
    flex-direction: column;
    flex-grow: 1; /* Allow container to fill body */
    width: 100%; /* Ensure it takes full width */
    overflow: hidden; /* Prevent scrollbars within the app */
}

canvas {
    display: block; /* Remove extra space below canvas */
    /* width: 100vw; Removed */
    /* height: 100vh; Removed */
    width: 100%; /* Take full width of parent */
    height: 0; /* Allow flex-grow to determine height */
    flex-grow: 1; /* Allow canvas to take up remaining space */
}

#ui-container {
    width: 100%;
    box-sizing: border-box;
    background-color: rgba(0, 0, 0, 0.9);
    padding: 0px 0px;
    display: flex;
    align-items: center; /* Align items vertically */
    justify-content: space-between; /* Push controls and stats apart */
    gap: 3px; /* Add a small gap between controls and stats (adjust as needed) */
    flex-wrap: nowrap; /* Prevent wrapping of controls/stats */
    flex-shrink: 0;
    border-top: 1px solid #444;
}

#controls-wrapper { /* NEW Style for the controls area */
    width: 85%;
    display: flex;
    align-items: center;
    gap: 15px; /* Gap between control groups */
    flex-wrap: wrap; /* Allow control groups to wrap */
    flex-shrink: 1; /* Allow controls to shrink if needed */
    flex-grow: 1; /* Allow controls to take up available space within 85% */
    justify-content: center;
}

/* === 3. GENERAL UI COMPONENT STYLES === */
input[type="range"] {
	color: #2b2d42;
	--track-color: rgba(0, 0, 0, 0.4);
	--brightness-hover: 180%;
	--brightness-down: 80%;
	--thumb-height: 2.1rem;
	--thumb-width: 1px; /* This might be a typo in original and intended for border or specific effect */
	--clip-edges: 0.0125em;
}

input[type="range"] { /* This is a duplicate block in the original, merging for order but keeping rules */
	position: relative;
	background: #fff0;
	overflow: hidden;
}

input[type="range"]:active {
	cursor: pointer; /* Should be grabbing for active state */
}

input[type="range"]:disabled {
	filter: grayscale(1);
	opacity: 0.3;
	cursor: not-allowed;
}

/* === WebKit specific styles === */
input[type="range"],
input[type="range"]::-webkit-slider-runnable-track,
input[type="range"]::-webkit-slider-thumb {
	-webkit-appearance: none;
	transition: all ease 100ms;
	height: var(--thumb-height);
}

input[type="range"]::-webkit-slider-runnable-track,
input[type="range"]::-webkit-slider-thumb {
	position: relative;
}

input[type="range"]::-webkit-slider-thumb {
	--thumb-radius: calc((var(--thumb-height) * 0.5) - 1px);
	--clip-top: calc((var(--thumb-height) - var(--track-height)) * 0.5 - 0.5px); /* --track-height not defined here in original */
	--clip-bottom: calc(var(--thumb-height) - var(--clip-top));
	--clip-further: calc(100% + 1px);
	--box-fill: calc(-100vmax - var(--thumb-width, var(--thumb-height))) 0 0
		100vmax currentColor;

	width: var(--thumb-width, var(--thumb-height));
	background: linear-gradient(currentColor 0 0) scroll no-repeat left center /
		50% calc(var(--track-height) + 1px); /* --track-height not defined here in original */
	background-color: currentColor;
	box-shadow: var(--box-fill);
	border-radius: var(--thumb-width, var(--thumb-height));

	filter: brightness(100%);
	clip-path: polygon(
		100% -1px,
		var(--clip-edges) -1px,
		0 var(--clip-top),
		-100vmax var(--clip-top),
		-100vmax var(--clip-bottom),
		0 var(--clip-bottom),
		var(--clip-edges) 100%,
		var(--clip-further) var(--clip-further)
	);
}

input[type="range"]:hover::-webkit-slider-thumb {
	filter: brightness(var(--brightness-hover));
	cursor: grab;
}

input[type="range"]:active::-webkit-slider-thumb {
	filter: brightness(var(--brightness-down));
	cursor: grabbing;
}

input[type="range"]::-webkit-slider-runnable-track {
	background: linear-gradient(var(--track-color) 0 0) scroll no-repeat center /
		100% calc(var(--track-height) + 1px); /* --track-height not defined here in original */
}

input[type="range"]:disabled::-webkit-slider-thumb {
	cursor: not-allowed;
}

#ui-container label {
    margin-right: 3px; /* Reduced margin */
    user-select: none; /* Prevent text selection on touch */
}

#ui-container input[type="range"] { /* This applies to sliders inside #ui-container */
    cursor: pointer;
    vertical-align: middle;
    min-width: 100px; /* Ensure slider is wide enough */
}

#ui-container input[type="text"] {
    padding: 6px 8px;
    border: 1px solid #555;
    background-color: #333;
    color: white;
    border-radius: 3px;
    font-size: 0.9em;
}

#ui-container button {
    padding: 6px 12px; /* Increased padding for touch */
    cursor: pointer;
    background-color: #4a4a4a;
    border: 1px solid #666;
    color: white;
    border-radius: 4px;
    font-size: 1.0em;
    transition: background-color 0.2s ease, transform 0.1s ease;
    user-select: none; /* Prevent text selection on touch */
    width: 70px;
    height: 50px;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto;
}
#ui-container button:hover {
    background-color: #5a5a5a;
}
#ui-container button:active {
    background-color: #6a6a6a;
    transform: scale(0.98);
}

#ui-container code {
    background-color: #333; /* Matched input bg */
    padding: 4px 6px;
    border-radius: 3px;
    font-size: 1.3em;
    font-weight: bold;
    font-family: monospace;
}

/* Added styles for slider value display (from original, seems to be for text overlay) */
.slider-container {
    position: relative; /* Establishes a positioning context for the span */
    display: inline-flex; /* Aligns slider and potential future elements */
    align-items: center; /* Vertically centers items if needed */
}

.slider-container input[type="range"] {
    vertical-align: middle; /* Keeps slider aligned with labels etc. */
}

.slider-container span { /* This is the value display span */
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    color: #FFFFFF;
    font-size: 0.8rem;
    font-family: Arial, sans-serif;
    pointer-events: none;
    z-index: 2;
    text-shadow: 0px 0px 3px rgba(0,0,0,0.9);
    padding: 1px 3px;
}


/* === 4. SPECIFIC UI GROUP/SECTION STYLES === */
.ui-group { /* NEW Style for groups */
    display: flex;
    align-items: center;
    gap: 10px; /* Gap within groups */
    padding: 5px 8px;
    background-color: rgba(255, 255, 255, 0.05);
    border-radius: 4px;
    flex-shrink: 0; /* Prevent groups from shrinking too much */
    flex-wrap: wrap; /* Allow items within a group to wrap if needed */
}

#rulesetInput { /* From original, ID specific */
    width: 50px; /* This is very small for a 32char hex */
}

#resetOnNewRuleCheckbox, #generateSymmetricalCheckbox, #useCustomBiasCheckbox { /* Apply to all these checkboxes */
    display: none; /* Hide the actual checkbox input */
}

#ui-container label.checkbox-label { /* Specific style for checkbox label */
    cursor: pointer;
    padding: 4px 6px;
    border-radius: 3px;
    transition: background-color 0.2s ease;
    border: 1px solid #555; /* Add a subtle border */
}
#ui-container label.checkbox-label:hover {
    background-color: rgba(255, 255, 255, 0.1);
}
#ui-container input[type="checkbox"]:checked + label.checkbox-label { /* Assumes label immediately follows input */
    background-color: #4CAF50; /* Green background when checked */
    border-color: #3e8e41;
    color: white;
}
#ui-container label.sym-label { /* Specific styling for "Symmetrical" to make it less wide */
    padding: 4px 3px;
}

#group-ruleset {
    display: flex;
    align-items: center; /* Align items including new checkbox/label */
    flex-wrap: wrap;
}

#group-ruleset .bias-controls {
    display: inline-flex; /* Align items in a row */
    align-items: center; /* Vertically center items */
    gap: 5px; /* Space between checkbox, label, slider, span */
    margin-left: 10px; /* Space from the "New Rules" button */
}

#biasSlider { /* From original, ID specific */
    width: 200px;
}
/* Style for when the slider is disabled via JS (by checkbox) */
#biasSlider:disabled { /* This is a more specific version of the general input[type=range]:disabled */
    opacity: 0.5; /* Original had 0.3 for general, this is more specific */
    cursor: not-allowed; /* Indicate it's not interactive */
}
#biasSlider:disabled + #biasValueSpan { /* Assumes span immediately follows */
    opacity: 0.5;
}

.rule-display-wrapper { /* Wrapper for better spacing */
    margin-left: 5px;
}

.separator { /* Keep separator for potential future use, but not currently used */
    color: #666;
    margin: 0 8px;
}

/* Stats Content Adjustments */
#stats-content {
    /*display: none;*/ /* This was commented out in original */
    flex-basis: auto; /* Override previous basis */
    background-color: rgba(255, 255, 255, 0.08);
    padding: 4px 6px;
    border-radius: 4px;
    font-size: 0.9em;
    display: flex;
    justify-content: center;
    flex-direction: column;
    box-sizing: border-box; /* Include padding in width calculation */
}

#stats-content h4 {
    margin: 0 0 5px 0;
    font-size: 0.9em;
    font-weight: normal;
    border-bottom: 1px solid #555;
    padding-bottom: 3px;
    text-align: center;
}

#stats-content div {
    margin-bottom: 3px; /* Increased spacing */
    font-size: 0.9em;
}

#stats-content span {
    font-weight: bold;
    min-width: 45px; /* Adjusted */
    display: inline-block;
    text-align: right;
    margin-left: 5px;
    background-color: rgba(0,0,0,0.2);
    padding: 1px 4px;
    border-radius: 2px;
}

/* Ensure existing biasSlider vertical alignment works with the new container */
/* This was a note, not an actual rule in original */
/* #group-ruleset .bias-controls .slider-container {
    vertical-align: middle;
} */


/* === 5. RULESET EDITOR PANEL STYLES === */
#rulesetEditorPanel {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    max-width: 100%; /* Max width */
    max-height: 100%; /* Max height */
    background-color: rgba(0, 00, 00, 0.99); /* Slightly lighter than body */
    border: 2px solid #555;
    border-radius: 8px;
    padding: 20px;
    box-sizing: border-box;
    z-index: 1000; /* Ensure it's on top */
    overflow-y: auto; /* Allow scrolling if content overflows */
    color: #eee;
    display: flex; /* Use flexbox for layout */
    flex-direction: column; /* Stack elements vertically */
}

#rulesetEditorPanel h3 {
    margin-top: 0;
    margin-bottom: 10px;
    text-align: center;
    border-bottom: 1px solid #555;
    padding-bottom: 10px;
    user-select: none;
}

#closeEditorButton {
    position: absolute;
    top: 10px;
    right: 15px;
    background: none;
    border: none;
    color: #ccc;
    font-size: 2em;
    font-weight: bold;
    cursor: pointer;
    padding: 0 5px;
    line-height: 1;
}
#closeEditorButton:hover {
    color: white;
}

.editor-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    margin-bottom: 15px;
    flex-wrap: wrap;
}

.editor-controls .editor-hex-input {
    font-family: monospace;
    font-size: 1.4em;
    background-color: #222;
    color: #eee;
    border: 1px solid #555;
    border-radius: 4px;
    padding: 8px 10px;
    width: 320px;
    text-align: center;
    flex-grow: 1;
    min-width: 200px;
}
.editor-controls .editor-hex-input::placeholder {
    color: #777;
}

#rulesetEditorMode {
    padding: 8px;
    background-color: #333;
    color: white;
    border: 1px solid #555;
    border-radius: 4px;
    font-size: 0.9em;
}

.editor-controls button { /* Button style specific to editor controls */
    padding: 6px 12px;
    cursor: pointer;
    background-color: #4a4a4a; /* Same as #ui-container button */
    border: 1px solid #666;    /* Same as #ui-container button */
    color: white;               /* Same as #ui-container button */
    border-radius: 4px;         /* Same as #ui-container button */
    font-size: 1.0em;
    transition: background-color 0.2s ease, transform 0.1s ease;
    user-select: none;
    width: auto; /* Let content define width */
    height: auto; /* Let content define height */
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 8px 12px; /* Match hex input padding for vertical alignment */
}
.editor-controls button:hover {
    background-color: #5a5a5a; /* Same as #ui-container button:hover */
}
.editor-controls button:active {
    background-color: #6a6a6a; /* Same as #ui-container button:active */
    transform: scale(0.98);    /* Same as #ui-container button:active */
}

.editor-text {
    font-size: 0.9em;
    color: #eee;
    margin: 10px auto 10px auto;
    text-align: left;
    line-height: 1.4;
}

/* === 6. RULESET EDITOR GRID & HEXAGON STYLES === */
#rulesetEditorGrid, #neighborCountRulesetEditorGrid {
    display: grid;
    margin: 0 auto;
    gap: 2px;
    padding: 5px;
    border: 1px solid #333;
    background-color: #1a1a1a;
    border-radius: 4px;
    overflow: auto;
}

#rulesetEditorGrid {
    grid-template-columns: repeat(16, 42px);
    grid-template-rows: repeat(8, 56px);
}

#neighborCountRulesetEditorGrid {
    grid-template-columns: repeat(7, 14%);
    grid-template-rows: auto;
    width: 95%;
}

.editor-text-rules {
    display: grid;
    grid-template-columns: repeat(2, 50%);
}

/* Individual Rule Visualization (Detailed) */
.rule-viz {
    position: relative;
    width: 100px;
    height: 110px;
    margin: auto;
    transform: scale(0.4) translate(-70px, -65px);
    cursor: pointer;
}

.rule-viz:hover .inner-hex {
    border-color: #FFF;
}

/* Neighbor Count Rule Visualization */
.neighbor-count-rule-viz {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 8px 5px;
    border: 1px solid #444;
    border-radius: 4px;
    cursor: pointer;
    background-color: #282828;
    transition: background-color 0.2s ease;
    min-height: 80px;
    box-sizing: border-box;
}
.neighbor-count-rule-viz:hover {
    background-color: #3a3a3a;
}
.neighbor-count-rule-viz .hexagon.center-hex {
    position: relative;
    transform: scale(0.8) translate(-53px, -53px); /* This translate looks large for just scale 0.8 */
    margin-bottom: 5px;
    width: 40px;
    height: calc(40px * 1.154701);
}
.neighbor-count-label {
    font-size: 0.75em;
    text-align: center;
    color: #ccc;
    margin-top: 3px;
    line-height: 1.2;
}

/* Hexagon Base Styles (Pointy-Top using CSS Clip Path) */
.hexagon {
    position: absolute;
    width: 40px;
    height: calc(40px * 1.154701);
    clip-path: polygon(0% 50%, 25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%); /* Flat Top polygon */
    /* clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%); */ /* Pointy Top polygon */
    background-color: #555;
    box-sizing: border-box;
}
/* Hexagon States */
.hexagon.state-0 {
    background-color: #404040;
}
.hexagon.state-1 {
    background-color: #FFFF00;
}
.hexagon.state-2 { /* For "mixed" states */
    background: linear-gradient(45deg, #633030, #306330);
}

/* Center Hexagon */
.center-hex { /* This is for rule-viz */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(1.0);
    z-index: 1;
}

/* Inner Hexagon (Result) */
.inner-hex { /* This is for rule-viz */
    width: 60%; /* of parent .center-hex */
    height: calc(60% * 1.154701); /* Maintain aspect ratio of parent's clip-path */
    /* The clip-path should be the same as parent if shape is to be identical */
    /* clip-path: polygon(0% 50%, 25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%); */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.8); /* This scale is on top of parent's .center-hex scale */
    border: 1.0px solid #CCCCCC;
    z-index: 2;
    transition: background-color 0.2s ease, border-color 0.2s ease;
}
.inner-hex.state-0 { background-color: #990000 !important; }
.inner-hex.state-1 { background-color: #00BB00 !important; }
.inner-hex.state-2 {
    background: linear-gradient(45deg, #700000, #005000) !important;
    border-color: #888 !important;
}

/* Neighbor Hexagons Positioning (Original used different order/positioning) */
/* These are for .rule-viz with its specific transform. Flat-top arrangement. */
/* Original neighbor order for .rule-viz: 0:SE, 1:NE, 2:N, 3:NW, 4:SW, 5:S (This is for the *bits*, visual layout is different) */
/* The CSS classes .neighbor-0 to .neighbor-5 are for visual positioning of flat-top hexes around a center. */
.neighbor-hex { /* For .rule-viz */
    transform-origin: center center;
    transform: translate(-50%, -50%) scale(0.9); /* Relative to their own center for positioning */
}
/* Original positioning for .rule-viz, assuming flat top for neighbors as well */
.neighbor-0 { top: 70%; left: 23%; }   /* Bottom-left visually (SE bit if center is pointy) */
.neighbor-1 { top: 31%; left: 23%; }   /* Top-left visually (NE bit) */
.neighbor-2 { top: 12%; left: 50%; }   /* Top visually (N bit) */
.neighbor-3 { top: 31%; left: 78%; }   /* Top-Right visually (NW bit) */
.neighbor-4 { top: 70%; left: 78%; }   /* Bottom-Right visually (SW bit) */
.neighbor-5 { top: 88%; left: 50%; }   /* Bottom visually (S bit) */


/* Inline hexagons for the explanation text */
.inline-hex { /* Original had transform: scale(1.5) here. Removing to "not change" */
    display: inline-block;
    width: 1em;
    height: calc(1em * 1.154701); /* Assuming pointy-top was intended here based on later clip-path */
    clip-path: polygon(0% 50%, 25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%); /* Flat Top */
    /* clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%); */ /* Pointy Top */
    vertical-align: middle;
    margin: 0 2px;
    position: relative;
    box-sizing: border-box;
}
.inline-hex-inner {
    position: absolute;
    display: inline-block; /* Not strictly needed with absolute */
    width: 60%;
    height: calc(60% * 1.154701); /* Maintain aspect ratio based on its own width */
    clip-path: polygon(0% 50%, 25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%); /* Flat Top */
    /* clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%); */ /* Pointy Top */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    border: 1px solid #CCCCCC;
    box-sizing: border-box;
}
.inline-hex.state-0 { background-color: #404040; }
.inline-hex.state-1 { background-color: #FFFF00; }
.inline-hex-inner.state-0 { background-color: #990000 !important; } /* from original */
.inline-hex-inner.state-1 { background-color: #00BB00 !important; } /* from original */


/* === 7. UTILITY CLASSES === */
.hidden { /* From original */
    display: none !important;
}

#rulesetEditorPanel.hidden { /* From original, more specific */
    display: none !important;
}


/* === 8. MEDIA QUERIES === */
/*if width less than 700px switch grid columns to 8 and rows to 16*/
@media (max-width: 700px) { /* From original */
    #rulesetEditorGrid {
        grid-template-columns: repeat(8, 42px);
        grid-template-rows: repeat(16, 56px);
    }
    .editor-controls .editor-hex-input {
        font-size: 1.2em;
        width: 250px;
    }
    #neighborCountRulesetEditorGrid {
         grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    }
}