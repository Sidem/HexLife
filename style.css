/* === 1. RESET/BASE STYLES === */
body {
    margin: 0;
    /* overflow: hidden; Removed */
    background-color: #222; /* Dark background */
    font-family: sans-serif;
    color: white;
    display: flex; /* Use flexbox for body */
    height: 100vh; /* Make body fill viewport height */
}

/* === 2. LAYOUT STYLES === */
#app-container {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    width: 100%;
    overflow: hidden;
}

canvas#hexGridCanvas {
    display: block;
    width: 100%;
    height: 0;
    flex-grow: 1;
}

/* Main UI Bar - Assuming split structure based on last HTML update */
#ui-container {
    width: 100%;
    box-sizing: border-box;
    background-color: rgba(0, 0, 0, 0.9);
    padding: 5px 10px; /* Padding for the whole bar */
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 15px; /* Gap between primary controls and status info */
    flex-wrap: nowrap;
    flex-shrink: 0;
    border-top: 1px solid #444;
}

#primary-controls-area {
    flex-grow: 1;
    display: flex;
    align-items: center;
    gap: 10px;
    flex-wrap: wrap;
    justify-content: center; /* Or flex-start */
}

#status-info-area {
    flex-shrink: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
}


/* === 3. GENERAL UI COMPONENT STYLES === */
input[type="range"] {
	color: #2b2d42;
	--track-color: rgba(0, 0, 0, 0.4);
	--brightness-hover: 180%;
	--brightness-down: 80%;
	--thumb-height: 2.1rem;
	--thumb-width: 1px;
	--clip-edges: 0.0125em;
}
input[type="range"] {
	position: relative;
	background: #fff0;
	overflow: hidden;
}
input[type="range"]:active {
	cursor: grabbing; /* Corrected from 'pointer' */
}
input[type="range"]:disabled {
	filter: grayscale(1);
	opacity: 0.3;
	cursor: not-allowed;
}

/* WebKit specific styles for range slider */
input[type="range"],
input[type="range"]::-webkit-slider-runnable-track,
input[type="range"]::-webkit-slider-thumb {
	-webkit-appearance: none;
	transition: all ease 100ms;
	height: var(--thumb-height);
}
input[type="range"]::-webkit-slider-runnable-track,
input[type="range"]::-webkit-slider-thumb {
	position: relative;
}
input[type="range"]::-webkit-slider-thumb {
	--thumb-radius: calc((var(--thumb-height) * 0.5) - 1px);
	/* Assuming --track-height would be defined if these clip-paths are to work perfectly */
	/* For now, it might rely on browser defaults or other CSS if --track-height is not set */
	--clip-top: calc((var(--thumb-height) - var(--track-height, 0.5rem)) * 0.5 - 0.5px);
	--clip-bottom: calc(var(--thumb-height) - var(--clip-top));
	--clip-further: calc(100% + 1px);
	--box-fill: calc(-100vmax - var(--thumb-width, var(--thumb-height))) 0 0 100vmax currentColor;

	width: var(--thumb-width, var(--thumb-height));
	background: linear-gradient(currentColor 0 0) scroll no-repeat left center / 50% calc(var(--track-height, 0.5rem) + 1px);
	background-color: currentColor;
	box-shadow: var(--box-fill);
	border-radius: var(--thumb-width, var(--thumb-height));
	filter: brightness(100%);
	clip-path: polygon(
		100% -1px, var(--clip-edges) -1px, 0 var(--clip-top),
		-100vmax var(--clip-top), -100vmax var(--clip-bottom),
		0 var(--clip-bottom), var(--clip-edges) 100%,
		var(--clip-further) var(--clip-further)
	);
}
input[type="range"]:hover::-webkit-slider-thumb {
	filter: brightness(var(--brightness-hover));
	cursor: grab;
}
input[type="range"]:active::-webkit-slider-thumb {
	filter: brightness(var(--brightness-down));
	cursor: grabbing;
}
input[type="range"]::-webkit-slider-runnable-track {
	background: linear-gradient(var(--track-color) 0 0) scroll no-repeat center / 100% calc(var(--track-height, 0.5rem) + 1px);
}
input[type="range"]:disabled::-webkit-slider-thumb {
	cursor: not-allowed;
}

/* Labels in UI bar */
#primary-controls-area label, #status-info-area label { /* Target labels within these areas */
    margin-right: 3px;
    user-select: none;
}

/* Text Inputs in UI bar */
#primary-controls-area input[type="text"].hex-input {
    padding: 6px 8px;
    border: 1px solid #555;
    background-color: #333;
    color: white;
    border-radius: 3px;
    font-size: 0.9em;
}

/* Buttons in UI bar */
#primary-controls-area button.button, #status-info-area button.button {
    padding: 6px 12px;
    cursor: pointer;
    background-color: #4a4a4a;
    border: 1px solid #666;
    color: white;
    border-radius: 4px;
    font-size: 1.0em;
    transition: background-color 0.2s ease, transform 0.1s ease;
    user-select: none;
    width: auto; /* Let content or min-width define */
    min-width: 70px;
    height: 50px;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0; /* Removed margin: 0 auto */
}
#primary-controls-area button.button:hover, #status-info-area button.button:hover {
    background-color: #5a5a5a;
}
#primary-controls-area button.button:active, #status-info-area button.button:active {
    background-color: #6a6a6a;
    transform: scale(0.98);
}

/* Code display in UI bar */
#primary-controls-area code#rulesetDisplay {
    background-color: #333;
    padding: 4px 6px;
    border-radius: 3px;
    font-size: 1.3em;
    font-weight: bold;
    font-family: monospace;
}

/* Slider Component Styling */
.slider-component-container {
    display: flex; /* Aligns label, slider, unit in a row */
    align-items: center;
    gap: 5px; /* Space between label, slider, and unit */
    /* margin: 5px 0; Optional margin for spacing in UI groups */
}

.slider-component-container label {
    margin-right: 3px; /* Keep some space if label exists */
    user-select: none;
    font-size: 0.9em; /* Consistent label size */
}

.slider-wrapper {
    position: relative; /* Crucial for positioning the value display */
    display: inline-flex; /* Or flex, to contain the input and span */
    align-items: center;
}

.slider-component-container input[type="range"] {
    /* Inherits general input[type="range"] styles from above */
    vertical-align: middle;
    min-width: 100px; /* Default min-width, can be overridden by specific slider IDs if needed */
    /* margin: 0; Remove default margins if any */
}

.slider-wrapper span.value-display {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    color: #FFFFFF;
    font-size: 0.8rem; /* Consistent with previous styling */
    font-family: Arial, sans-serif;
    pointer-events: none;
    z-index: 2; /* Above the slider track */
    text-shadow: 0px 0px 3px rgba(0,0,0,0.9);
    padding: 1px 3px;
    white-space: nowrap; /* Prevent wrapping of the number */
}
 .slider-component-container span.unit-display {
     font-size: 0.9em;
     color: #ccc;
     margin-left: 2px; /* Small space after the slider input or wrapper */
     user-select: none;
 }

/* Checkbox custom styling */
input.checkbox-input { /* The actual hidden checkbox */
    display: none;
}
label.checkbox-label { /* The visible part for the checkbox */
    cursor: pointer;
    padding: 4px 6px;
    border-radius: 3px;
    transition: background-color 0.2s ease;
    border: 1px solid #555;
    user-select: none;
    display: inline-block;
    line-height: normal; /* Adjust if needed */
}
label.checkbox-label:hover {
    background-color: rgba(255, 255, 255, 0.1);
}
input.checkbox-input:checked + label.checkbox-label {
    background-color: #4CAF50;
    border-color: #3e8e41;
    color: white;
}
label.sym-label { /* Specific for "Symmetrical" checkbox label if less width needed */
    padding: 4px 3px;
}


/* === 4. SPECIFIC UI GROUP/SECTION STYLES === */
.ui-group {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 5px 8px;
    background-color: rgba(255, 255, 255, 0.05);
    border-radius: 4px;
    flex-shrink: 0;
    flex-wrap: wrap; /* Allow items within a group to wrap */
}

#rulesetInput { /* ID specific for main UI hex input */
    width: 150px; /* Adjusted width from original 50px */
    text-align: center;
}

#group-ruleset .bias-controls {
    display: inline-flex;
    align-items: center;
    gap: 5px;
    margin-left: 10px;
}
#biasSlider { /* ID specific slider width */
    width: 200px;
}
#biasSlider:disabled + span.value-display { /* More specific selector for value display */
    opacity: 0.5;
}

.rule-display-wrapper {
    margin-left: 5px;
}

.separator {
    color: #666;
    margin: 0 8px;
}

/* Stats Content Styling */
#stats-content { /* This is now a .ui-group itself */
    /* flex-basis: auto; */ /* flex-basis is on flex items, .ui-group is already one */
    /* background-color, padding, border-radius inherited from .ui-group */
    font-size: 0.9em;
    /* display: flex; inherited from .ui-group, default row */
    flex-direction: column; /* Stack stat lines vertically */
    box-sizing: border-box;
}
#stats-content h4 { /* If you re-add a title inside stats */
    margin: 0 0 5px 0;
    font-size: 0.9em; /* Relative to parent .ui-group */
    font-weight: normal;
    border-bottom: 1px solid #555;
    padding-bottom: 3px;
    text-align: center;
}
#stats-content div { /* Each stat line */
    margin-bottom: 3px;
    font-size: 0.9em; /* Relative to parent .ui-group */
}
#stats-content span { /* The value part of the stat */
    font-weight: bold;
    min-width: 45px;
    display: inline-block;
    text-align: right;
    margin-left: 5px;
    background-color: rgba(0,0,0,0.2);
    padding: 1px 4px;
    border-radius: 2px;
}
/* #group-performance would also be a .ui-group and styled similarly if containing text */
#group-performance div {
    font-size: 0.9em;
}
#group-performance span {
    font-weight: bold;
    min-width: 30px; /* Adjusted for FPS/TPS */
    display: inline-block;
    text-align: right;
    margin-left: 5px;
    background-color: rgba(0,0,0,0.2);
    padding: 1px 4px;
    border-radius: 2px;
}


/* === 5. COMMON PANEL STYLES (Ruleset Editor & Setup Panel) === */
/* Base styles for panels like Ruleset Editor and Setup Panel */
.draggable-panel-base { /* Apply this class to #rulesetEditorPanel and #setupPanel in HTML */
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    max-width: 90vw; /* Use viewport units for better responsiveness */
    max-height: 90vh;
    background-color: rgba(15, 15, 15, 0.98); /* Consistent background */
    border: 1px solid #555; /* Consistent border */
    border-radius: 8px;
    padding: 15px; /* Consistent padding */
    box-sizing: border-box;
    z-index: 1000;
    color: #eee;
    display: flex;
    flex-direction: column;
    overflow: hidden; /* Panel manages internal scroll via .panel-content-area */
}
.draggable-panel-base h3 { /* Common style for panel titles (drag handles) */
    margin-top: 0;
    margin-bottom: 10px;
    text-align: center;
    border-bottom: 1px solid #444;
    padding-bottom: 8px;
    user-select: none;
    font-size: 1.2em;
    cursor: move; /* Indicate draggable */
}
.close-panel-button { /* Common style for close buttons */
    position: absolute;
    top: 8px;
    right: 12px;
    background: none;
    border: none;
    color: #aaa;
    font-size: 1.8em;
    font-weight: bold;
    cursor: pointer;
    padding: 0 5px;
    line-height: 1;
}
.close-panel-button:hover {
    color: white;
}
.panel-content-area { /* Wrapper for scrollable content within panels */
    flex-grow: 1;
    overflow-y: auto;
    padding: 5px; /* Padding for the content area itself */
    border-top: 1px solid #333; /* Optional separator */
    margin-top: 5px; /* Optional separator */
}
.panel-actions { /* For buttons at the bottom of a panel */
    margin-top: 15px;
    padding-top: 10px;
    border-top: 1px solid #444;
    display: flex;
    justify-content: center; /* Or flex-end */
    gap: 10px;
}
.panel-actions .button { /* Buttons inside panel actions */
    height: auto; /* Let padding define height */
    padding: 8px 15px;
}

/* === 6. RULESET EDITOR PANEL SPECIFIC STYLES === */
/* Apply .draggable-panel-base to #rulesetEditorPanel in HTML */
#rulesetEditorPanel {
    width: clamp(320px, 90vw, 700px); /* Specific width constraints if needed */
}
/* #rulesetEditorPanel.hidden inherited from .hidden */

.editor-controls {
    display: flex;
    justify-content: space-around;
    align-items: center;
    gap: 10px;
    margin-bottom: 10px;
    flex-wrap: wrap;
}
.editor-controls .editor-hex-input {
    font-family: monospace;
    font-size: 1.2em;
    background-color: #222;
    color: #eee;
    border: 1px solid #444;
    border-radius: 4px;
    padding: 6px 8px;
    width: 280px;
    text-align: center;
    flex-grow: 1;
    min-width: 200px;
}
.editor-controls .editor-hex-input::placeholder {
    color: #666;
}
.editor-controls #rulesetEditorMode {
    padding: 7px;
    background-color: #333;
    color: white;
    border: 1px solid #555;
    border-radius: 4px;
    font-size: 0.85em;
}
.editor-controls #clearRulesButton.button { /* Target if it's a .button */
    min-width: 80px;
}

#rulesetEditorGrid, #neighborCountRulesetEditorGrid {
    display: grid;
    margin: 0 auto 10px auto;
    gap: 2px;
    padding: 5px;
    border: 1px solid #333;
    background-color: #1a1a1a;
    border-radius: 4px;
}
#rulesetEditorGrid {
    grid-template-columns: repeat(16, 5.9%);
    grid-template-rows: repeat(8, 55px);
    max-width: calc(16 * 42px + 15 * 2px + 10px);
}
#neighborCountRulesetEditorGrid {
    grid-template-columns: repeat(7, 13.4%);
    width: 100%;
    gap: 5px;
}

.editor-text {
    font-size: 0.85em;
    color: #ccc;
    margin: 0 auto 10px auto;
    text-align: left;
    line-height: 1.3;
    padding: 0 5px;
}
.editor-text.info-text { /* For informational text in panels */
    text-align: center;
    margin-bottom: 15px;
    font-style: italic;
    color: #aaa;
}
.editor-text-rules {
    display: grid;
    grid-template-columns: repeat(2, minmax(180px, 1fr));
    gap: 5px;
    margin-top: 5px;
}

/* Individual Rule Visualization (Detailed) - Preserved from original request */
.rule-viz {
    position: relative;
    width: 100px;
    height: 110px;
    margin: auto;
    transform: scale(0.4) translate(-70px, -65px);
    cursor: pointer;
}
.rule-viz:hover .inner-hex { border-color: #FFF; }

/* Hexagon Base Styles (Flat-Top as per original clip-path) - Preserved */
.hexagon {
    position: absolute;
    width: 40px;
    height: calc(40px * 0.866025 * 2); /* height = width * sin(60) * 2 for flat top */
    /* Corrected height for flat top: height = width * sqrt(3)/2 * 2 = width * sqrt(3) approx width * 1.732
       However, original clip path implies width is vertex to vertex, height is side to side distance / sin(60)
       The original clip-path: polygon(0% 50%, 25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%); means width:height ratio is 1:sqrt(3)/2*2 = 1:sqrt(3)
       So height = width * (sqrt(3)/2). The original calc(40px * 1.154701) was for pointy top if width is side-to-side.
       For flat top where width is vertex-to-vertex, height = width * sqrt(3)/2.
       If width = 40px is vertex-to-vertex, then side length is 20px. Height is 2 * (20 * sqrt(3)/2) = 20 * sqrt(3) ~ 34.64px
       The original provided clip-path is `polygon(0% 50%, 25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%)` which is a FLAT TOP.
       Original height calc was `calc(40px * 1.154701)` - this is for POINTY top.
       For the FLAT top clip path above, height should be `calc(40px * 0.866025)` if 40px is the width (vertex to vertex).
       Let's stick to the user's original values and request to not change.
    */
    height: calc(40px * 1.154701); /* Preserving user's original height calc despite clip-path mismatch */
    clip-path: polygon(0% 50%, 25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%);
    background-color: #555;
    box-sizing: border-box;
}
.hexagon.state-0 { background-color: #404040; }
.hexagon.state-1 { background-color: #FFFF00; }
.hexagon.state-2 { background: linear-gradient(45deg, #633030, #306330); }

.center-hex { /* For .rule-viz */
    top: 50%; left: 50%;
    transform: translate(-50%, -50%) scale(1.0);
    z-index: 1;
}
.inner-hex { /* For .rule-viz */
    width: 60%; height: calc(60% * 1.154701); /* Preserving */
    top: 50%; left: 50%;
    transform: translate(-50%, -50%) scale(0.8); /* Preserving */
    border: 1.0px solid #CCCCCC; z-index: 2;
    transition: background-color 0.2s ease, border-color 0.2s ease;
}
.inner-hex.state-0 { background-color: #990000 !important; }
.inner-hex.state-1 { background-color: #00BB00 !important; }
.inner-hex.state-2 { background: linear-gradient(45deg, #700000, #005000) !important; border-color: #888 !important; }

.neighbor-hex { /* For .rule-viz - Preserving */
    transform-origin: center center;
    transform: translate(-50%, -50%) scale(0.9);
}
.neighbor-0 { top: 70%; left: 23%; } .neighbor-1 { top: 31%; left: 23%; }
.neighbor-2 { top: 12%; left: 50%; } .neighbor-3 { top: 31%; left: 78%; }
.neighbor-4 { top: 70%; left: 78%; } .neighbor-5 { top: 88%; left: 50%; }

/* Neighbor Count Rule Visualization - Preserved */
.neighbor-count-rule-viz {
    display: flex; flex-direction: column; align-items: center; justify-content: center;
    padding: 8px 5px; border: 1px solid #444; border-radius: 4px; cursor: pointer;
    background-color: #282828; transition: background-color 0.2s ease;
    min-height: 80px; box-sizing: border-box;
}
.neighbor-count-rule-viz:hover { background-color: #3a3a3a; }
.neighbor-count-rule-viz .hexagon.center-hex { /* Hex inside N-count viz */
    position: relative; transform: scale(0.8) translate(-53px, -53px); /* Preserving original large translate */
    margin-bottom: 5px; width: 40px; height: calc(40px * 1.154701);
}
.neighbor-count-label { font-size: 0.75em; text-align: center; color: #ccc; margin-top: 3px; line-height: 1.2; }

/* Inline Hexagons - Preserved */
.inline-hex {
    display: inline-block; width: 1em; height: calc(1em * 1.154701);
    clip-path: polygon(0% 50%, 25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%);
    vertical-align: middle; margin: 0 2px; position: relative; box-sizing: border-box;
}
.inline-hex-inner {
    position: absolute; display: inline-block; width: 60%; height: calc(60% * 1.154701);
    clip-path: polygon(0% 50%, 25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%);
    top: 50%; left: 50%; transform: translate(-50%, -50%);
    border: 1px solid #CCCCCC; box-sizing: border-box;
}
.inline-hex.state-0 { background-color: #404040; }
.inline-hex.state-1 { background-color: #FFFF00; }
.inline-hex-inner.state-0 { background-color: #990000 !important; }
.inline-hex-inner.state-1 { background-color: #00BB00 !important; }


/* === 7. SETUP PANEL SPECIFIC STYLES (NEW) === */
/* Apply .draggable-panel-base to #setupPanel in HTML */
#setupPanel {
    width: clamp(400px, 60vw, 550px); /* Setup panel might need different width */
}
.world-config-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* 3x3 grid */
    gap: 15px; /* Gap between world config cells */
    padding: 10px 0;
}
.world-config-cell {
    border: 1px solid #333;
    border-radius: 6px;
    padding: 10px;
    background-color: rgba(255, 255, 255, 0.03);
    display: flex;
    flex-direction: column;
    gap: 8px; /* Gap between elements within a cell */
    align-items: center; /* Center content in cell */
}
.world-label {
    font-weight: bold;
    font-size: 0.9em;
    color: #bbb;
    margin-bottom: 5px;
}
.setting-control { /* Common wrapper for density and enable controls */
    display: flex;
    flex-direction: column; /* Stack label, slider/switch */
    align-items: center;
    width: 100%;
    gap: 5px;
}
.setting-control label { /* Label for Density or Enabled */
    font-size: 0.8em;
    color: #aaa;
}
.density-slider { /* Specific class for density sliders if needed */
    width: 100%; /* Make slider take full width of its container */
    /* General input[type=range] styles apply */
}
.density-value-display { /* Span showing density value */
    font-size: 0.8em;
    color: #ddd;
    background-color: rgba(0,0,0,0.3);
    padding: 2px 4px;
    border-radius: 3px;
    min-width: 35px; /* Ensure space for "0.000" */
    text-align: center;
}
.enable-control label.checkbox-label { /* Label for "Enabled/Disabled" switch */
    padding: 5px 10px; /* Make it more button-like */
    font-size: 0.85em;
}

#analysisPanel {
    width: clamp(400px, 60vw, 550px); /* Increased default width slightly */
}

#analysisPanel.hidden {
    display: none !important;
}

.analysis-controls {
    display: flex;
    flex-wrap: wrap; /* Allow wrapping on smaller screens */
    align-items: center;
    justify-content: space-between;
    padding: 10px 5px;
    margin-bottom: 10px; /* Reduced margin */
    border-bottom: 1px solid #333;
    gap: 10px; /* Spacing between control groups */
}
.analysis-controls .button {
    height: auto;
    padding: 6px 12px;
    min-width: 120px; /* Give button some width */
    flex-shrink: 0;
}

.sampling-control {
    display: inline-flex; /* Keep checkbox and label together */
    align-items: center;
}
.sampling-control .checkbox-label {
     padding: 5px 8px; /* Slightly smaller padding */
     font-size: 0.9em;
}

.sampling-slider {
    display: inline-flex;
    align-items: center;
    gap: 5px;
}
.sampling-slider label {
    font-size: 0.85em;
    color: #aaa;
}
#entropySampleRateSlider {
    width: 120px; /* Adjust width */
    min-width: 80px;
    /* Inherits general range slider styles */
}
#entropySampleRateSlider:disabled {
    /* General disabled styles apply */
    opacity: 0.4;
}
#entropySampleRateSlider:disabled + span.value-display {
    opacity: 0.5;
}


.entropy-display {
    font-size: 0.95em;
    color: #ddd;
    margin-left: auto; /* Push to the right if space allows */
    padding-left: 10px; /* Add some space */
    white-space: nowrap; /* Prevent breaking */
}

.entropy-display span {
    font-weight: bold;
    margin-left: 5px;
    background-color: rgba(0,0,0,0.2);
    padding: 2px 5px;
    border-radius: 3px;
    display: inline-block;
    min-width: 50px;
    text-align: right;
}

.plot-container {
    margin-top: 10px;
    padding: 8px; /* Slightly more padding */
    border: 1px solid #333;
    background-color: rgba(0,0,0,0.2);
    border-radius: 4px;
    display: flex;
    flex-direction: column;
    align-items: center;
}
.plot-container label { /* Applies to both plot labels */
    font-size: 0.8em;
    color: #aaa;
    margin-bottom: 5px;
    text-align: center;
}
#ratioPlotCanvas, #entropyPlotCanvas { /* Apply to both canvases */
    display: block;
    width: 100%;
    height: 100px;
    background-color: #2a2a2a;
    border-radius: 2px; /* Optional slight rounding */
}


/* === 8. UTILITY CLASSES === */
.hidden {
    display: none !important;
}
#rulesetEditorPanel.hidden, #setupPanel.hidden { /* Ensure hidden applies to new panel too */
    display: none !important;
}


/* === 9. MEDIA QUERIES (Original + additions for new panel if needed) === */
@media (max-width: 700px) {
    #rulesetEditorGrid {
        grid-template-columns: repeat(8, 42px);
        grid-template-rows: repeat(16, 56px);
    }
    .editor-controls .editor-hex-input { font-size: 1.2em; width: 250px; }
    #neighborCountRulesetEditorGrid { grid-template-columns: repeat(7, 14%); }

    .world-config-grid { /* Make setup panel grid stack on small screens */
        grid-template-columns: 1fr; /* Single column */
        gap: 10px;
    }
    #setupPanel {
        width: clamp(280px, 85vw, 400px); /* Adjust width for smaller screens */
    }
    #analysisPanel {
        width: clamp(300px, 80vw, 400px); /* Adjust analysis panel width */
   }
   .analysis-controls {
        justify-content: center; /* Center controls when wrapping */
    }
    .entropy-display {
    margin-left: 0; /* Reset margin */
    width: 100%; /* Take full width if wrapping */
    text-align: center;
    margin-top: 5px;
    }
}
@media (max-width: 480px) {
    /* Adjust main UI bar layout for very small screens */
    #ui-container {
        flex-direction: column;
        align-items: stretch; /* Make children take full width */
        gap: 5px;
    }
    #primary-controls-area, #status-info-area {
        width: 100%;
        justify-content: center; /* Center items in these areas */
        gap: 5px;
    }
    #status-info-area {
        flex-direction: row; /* Stats and perf side-by-side if they fit */
        justify-content: space-around;
    }
     /* Panel control adjustments from original */
    .editor-controls { flex-direction: column; align-items: stretch; }
    .editor-controls .editor-hex-input,
    .editor-controls #rulesetEditorMode,
    .editor-controls #clearRulesButton.button {
        width: 100%; margin-bottom: 5px;
    }
    .analysis-controls {
        flex-direction: column; /* Stack button and display */
        align-items: center;
        gap: 10px;
     }
     #analysisPanel {
         width: clamp(250px, 90vw, 300px); /* Adjust analysis panel width */
     }
}

/* Ensure specific sliders can still have their widths adjusted if needed via their ID */
#speedSlider, #neighborhoodSize, #biasSlider, #entropySampleRateSlider {
    min-width: 120px; /* Example, adjust as needed or remove if default is fine */
}
#biasSlider {
    min-width: 150px; /* Bias might need more space */
}

/* Ensure sliders in SetupPanel also get consistent styling */
.density-control .slider-component-container input[type="range"] {
     width: 100%; /* Make density sliders take full width of their cell's component container */
     min-width: 0; /* Override any other min-width for density sliders */
}