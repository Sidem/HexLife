body {
    margin: 0;
    /* overflow: hidden; Removed */
    background-color: #222; /* Dark background */
    font-family: sans-serif;
    color: white;
    display: flex; /* Use flexbox for body */
    height: 100vh; /* Make body fill viewport height */
}

input[type="range"] {
	color: #2b2d42;
	--track-color: rgba(0, 0, 0, 0.4);
	--brightness-hover: 180%;
	--brightness-down: 80%;
	--thumb-height: 2.1rem;
	--thumb-width: 1px;
	--clip-edges: 0.0125em;
}

input[type="range"] {
	position: relative;
	background: #fff0;
	overflow: hidden;
}

input[type="range"]:active {
	cursor: pointer;
}

input[type="range"]:disabled {
	filter: grayscale(1);
	opacity: 0.3;
	cursor: not-allowed;
}

#biasSlider {
    width: 200px;
}

/* === WebKit specific styles === */
input[type="range"],
input[type="range"]::-webkit-slider-runnable-track,
input[type="range"]::-webkit-slider-thumb {
	-webkit-appearance: none;
	transition: all ease 100ms;
	height: var(--thumb-height);
}

input[type="range"]::-webkit-slider-runnable-track,
input[type="range"]::-webkit-slider-thumb {
	position: relative;
}

input[type="range"]::-webkit-slider-thumb {
	--thumb-radius: calc((var(--thumb-height) * 0.5) - 1px);
	--clip-top: calc((var(--thumb-height) - var(--track-height)) * 0.5 - 0.5px);
	--clip-bottom: calc(var(--thumb-height) - var(--clip-top));
	--clip-further: calc(100% + 1px);
	--box-fill: calc(-100vmax - var(--thumb-width, var(--thumb-height))) 0 0
		100vmax currentColor;

	width: var(--thumb-width, var(--thumb-height));
	background: linear-gradient(currentColor 0 0) scroll no-repeat left center /
		50% calc(var(--track-height) + 1px);
	background-color: currentColor;
	box-shadow: var(--box-fill);
	border-radius: var(--thumb-width, var(--thumb-height));

	filter: brightness(100%);
	clip-path: polygon(
		100% -1px,
		var(--clip-edges) -1px,
		0 var(--clip-top),
		-100vmax var(--clip-top),
		-100vmax var(--clip-bottom),
		0 var(--clip-bottom),
		var(--clip-edges) 100%,
		var(--clip-further) var(--clip-further)
	);
}

input[type="range"]:hover::-webkit-slider-thumb {
	filter: brightness(var(--brightness-hover));
	cursor: grab;
}

input[type="range"]:active::-webkit-slider-thumb {
	filter: brightness(var(--brightness-down));
	cursor: grabbing;
}

input[type="range"]::-webkit-slider-runnable-track {
	background: linear-gradient(var(--track-color) 0 0) scroll no-repeat center /
		100% calc(var(--track-height) + 1px);
}

input[type="range"]:disabled::-webkit-slider-thumb {
	cursor: not-allowed;
}

#app-container { /* NEW */
    display: flex;
    flex-direction: column;
    flex-grow: 1; /* Allow container to fill body */
    width: 100%; /* Ensure it takes full width */
    overflow: hidden; /* Prevent scrollbars within the app */
}

canvas {
    display: block; /* Remove extra space below canvas */
    /* width: 100vw; Removed */
    /* height: 100vh; Removed */
    width: 100%; /* Take full width of parent */
    height: 0; /* Allow flex-grow to determine height */
    flex-grow: 1; /* Allow canvas to take up remaining space */
}
#rulesetInput {
    width: 50px;
}

#resetOnNewRuleCheckbox, #generateSymmetricalCheckbox, #useCustomBiasCheckbox { /* Apply to both checkboxes */
    display: none; /* Hide the actual checkbox input */
}

#ui-container {
    width: 100%;
    box-sizing: border-box;
    background-color: rgba(0, 0, 0, 0.9);
    padding: 0px 0px;
    display: flex;
    align-items: center; /* Align items vertically */
    justify-content: space-between; /* Push controls and stats apart */
    gap: 3px; /* Add a small gap between controls and stats (adjust as needed) */
    flex-wrap: nowrap; /* Prevent wrapping of controls/stats */
    flex-shrink: 0;
    border-top: 1px solid #444;
}

#controls-wrapper { /* NEW Style for the controls area */
    width: 85%;
    display: flex;
    align-items: center;
    gap: 15px; /* Gap between control groups */
    flex-wrap: wrap; /* Allow control groups to wrap */
    flex-shrink: 1; /* Allow controls to shrink if needed */
    flex-grow: 1; /* Allow controls to take up available space within 85% */
    justify-content: center;
}

.ui-group { /* NEW Style for groups */
    display: flex;
    align-items: center;
    gap: 10px; /* Gap within groups */
    padding: 5px 8px;
    background-color: rgba(255, 255, 255, 0.05);
    border-radius: 4px;
    flex-shrink: 0; /* Prevent groups from shrinking too much */
    flex-wrap: wrap; /* Allow items within a group to wrap if needed */
}

#ui-container label {
    margin-right: 3px; /* Reduced margin */
    user-select: none; /* Prevent text selection on touch */
}

#ui-container label.checkbox-label { /* Specific style for checkbox label */
    cursor: pointer;
    padding: 4px 6px;
    border-radius: 3px;
    transition: background-color 0.2s ease;
    border: 1px solid #555; /* Add a subtle border */
}
#ui-container label.checkbox-label:hover {
    background-color: rgba(255, 255, 255, 0.1);
}
#ui-container input[type="checkbox"]:checked + label.checkbox-label {
    background-color: #4CAF50; /* Green background when checked */
    border-color: #3e8e41;
    color: white;
}
#ui-container label.sym-label { /* Specific styling for "Symmetrical" to make it less wide */
    padding: 4px 3px;
}


#ui-container input[type="range"] {
    cursor: pointer;
    vertical-align: middle;
    min-width: 100px; /* Ensure slider is wide enough */
}

#group-ruleset {
    display: flex;
    align-items: center; /* Align items including new checkbox/label */
    flex-wrap: wrap;
}

#group-ruleset .bias-controls {
    display: inline-flex; /* Align items in a row */
    align-items: center; /* Vertically center items */
    gap: 5px; /* Space between checkbox, label, slider, span */
    margin-left: 10px; /* Space from the "New Rules" button */
}

/* Style for when the slider is disabled via JS (by checkbox) */
#biasSlider:disabled {
    opacity: 0.5;
    cursor: not-allowed; /* Indicate it's not interactive */
}
#biasSlider:disabled + #biasValueSpan {
    opacity: 0.5;
}

#ui-container input[type="text"] {
    padding: 6px 8px;
    border: 1px solid #555;
    background-color: #333;
    color: white;
    border-radius: 3px;
    font-size: 0.9em;
}

/* #ui-container input[type="checkbox"] {  -- We are hiding the default checkbox now
    margin-right: -2px;
    vertical-align: middle;
    transform: scale(1.1);
} */

#ui-container button {
    padding: 6px 12px; /* Increased padding for touch */
    cursor: pointer;
    background-color: #4a4a4a;
    border: 1px solid #666;
    color: white;
    border-radius: 4px;
    font-size: 1.0em;
    transition: background-color 0.2s ease, transform 0.1s ease;
    user-select: none; /* Prevent text selection on touch */
    width: 70px;
    height: 50px;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto;
}
#ui-container button:hover {
    background-color: #5a5a5a;
}
#ui-container button:active {
    background-color: #6a6a6a;
    transform: scale(0.98);
}

#ui-container code {
    background-color: #333; /* Matched input bg */
    padding: 4px 6px;
    border-radius: 3px;
    font-size: 1.3em;
    font-weight: bold;
    font-family: monospace;
}

.rule-display-wrapper { /* Wrapper for better spacing */
    margin-left: 5px;
}

.separator { /* Keep separator for potential future use, but not currently used */
    color: #666;
    margin: 0 8px;
}

/* Stats Content Adjustments */
#stats-content {
    /*display: none;*/
    flex-basis: auto; /* Override previous basis */
    background-color: rgba(255, 255, 255, 0.08);
    padding: 4px 6px;
    border-radius: 4px;
    font-size: 0.9em;
    display: flex;
    justify-content: center;
    flex-direction: column;
    box-sizing: border-box; /* Include padding in width calculation */
}

#stats-content h4 {
    margin: 0 0 5px 0;
    font-size: 0.9em;
    font-weight: normal;
    border-bottom: 1px solid #555;
    padding-bottom: 3px;
    text-align: center;
}

#stats-content div {
    margin-bottom: 3px; /* Increased spacing */
    font-size: 0.9em;
}

#stats-content span {
    font-weight: bold;
    min-width: 45px; /* Adjusted */
    display: inline-block;
    text-align: right;
    margin-left: 5px;
    background-color: rgba(0,0,0,0.2);
    padding: 1px 4px;
    border-radius: 2px;
}

/* --- Ruleset Editor Panel --- */
#rulesetEditorPanel {
    position: fixed; /* Changed from absolute to fixed */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    max-width: 100%; /* Max width */
    max-height: 100%; /* Max height */
    background-color: rgba(0, 00, 00, 0.99); /* Slightly lighter than body */
    border: 2px solid #555;
    border-radius: 8px;
    padding: 20px;
    box-sizing: border-box;
    z-index: 1000; /* Ensure it's on top */
    overflow-y: auto; /* Allow scrolling if content overflows */
    color: #eee;
    display: flex; /* Use flexbox for layout */
    flex-direction: column; /* Stack elements vertically */
}

#rulesetEditorPanel h3 {
    margin-top: 0;
    margin-bottom: 10px;
    text-align: center;
    border-bottom: 1px solid #555;
    padding-bottom: 10px;
    user-select: none; /* Add this to prevent text selection during drag */
    /* cursor: move; will be set by JS, but can be here too */
}

#rulesetEditorPanel.hidden {
    display: none !important; /* Ensure hidden class takes precedence */
}


#closeEditorButton {
    position: absolute;
    top: 10px;
    right: 15px;
    background: none;
    border: none;
    color: #ccc;
    font-size: 2em;
    font-weight: bold;
    cursor: pointer;
    padding: 0 5px;
    line-height: 1;
}
#closeEditorButton:hover {
    color: white;
}


.editor-controls {
    display: flex; /* Align input and button in a row */
    justify-content: center; /* Center them */
    align-items: center; /* Vertically align */
    gap: 10px; /* Space between input and button */
    margin-bottom: 15px; /* Space below controls */
    flex-wrap: wrap; /* Allow controls to wrap on smaller screens */
}

.editor-controls .editor-hex-input {
    font-family: monospace;
    font-size: 1.4em; /* Slightly smaller to fit with select */
    background-color: #222; /* Dark background */
    color: #eee; /* Light text */
    border: 1px solid #555;
    border-radius: 4px;
    padding: 8px 10px;
    width: 320px; /* Adjust width as needed */
    text-align: center;
    flex-grow: 1; /* Allow input to take more space */
    min-width: 200px;
}
.editor-controls .editor-hex-input::placeholder {
    color: #777;
}

#rulesetEditorMode {
    padding: 8px;
    background-color: #333;
    color: white;
    border: 1px solid #555;
    border-radius: 4px;
    font-size: 0.9em;
}


/* Style for the "Clear" button in editor-controls to match ui-container buttons */
.editor-controls button {
    padding: 6px 12px;
    cursor: pointer;
    background-color: #4a4a4a;
    border: 1px solid #666;
    color: white;
    border-radius: 4px;
    font-size: 1.0em; /* Match ui-container button font size */
    transition: background-color 0.2s ease, transform 0.1s ease;
    user-select: none;
    width: auto; /* Let content define width, or set fixed if preferred */
    height: auto; /* Let content define height, or set fixed */
    /* Ensure flex alignment works if needed */
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 8px 12px; /* Match hex input padding for vertical alignment */
}
.editor-controls button:hover {
    background-color: #5a5a5a;
}
.editor-controls button:active {
    background-color: #6a6a6a;
    transform: scale(0.98);
}


.editor-text {
    font-size: 0.9em; /* Slightly smaller to save space */
    color: #eee;
    margin: 10px auto 10px auto; /* Adjust margin */
    text-align: left;
    line-height: 1.4; /* Improve readability */
}

/* --- Ruleset Editor Grid --- */
#rulesetEditorGrid, #neighborCountRulesetEditorGrid {
    display: grid;
    margin: 0 auto; /* Center the grid */
    gap: 2px; /* Small gap between rule visualizations */
    padding: 5px;
    border: 1px solid #333;
    background-color: #1a1a1a;
    border-radius: 4px;
    overflow: auto; /* If panel itself doesn't scroll enough */
}

#rulesetEditorGrid {
    grid-template-columns: repeat(16, 42px); /* Responsive grid */
    grid-template-rows: repeat(8, 56px);
}

#neighborCountRulesetEditorGrid {
    grid-template-columns: repeat(7, 14%); /* Responsive columns */
    grid-template-rows: auto;
    width: 95%;
}


/*if width less than 700px switch grid columns to 8 and rows to 16*/
@media (max-width: 700px) {
    #rulesetEditorGrid {
        grid-template-columns: repeat(8, 42px);
        grid-template-rows: repeat(16, 56px);
    }
    .editor-controls .editor-hex-input {
        font-size: 1.2em;
        width: 250px;
    }
    #neighborCountRulesetEditorGrid {
         grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    }
}

.editor-text-rules {
    display: grid;
    grid-template-columns: repeat(2, 50%);
}

.inline-hex {
    transform: scale(1.5);
}

/* --- Individual Rule Visualization (Detailed) --- */
.rule-viz {
    position: relative;
    width: 100px; /* Fixed width for consistency */
    height: 110px; /* Fixed height */
    margin: auto; /* Center in grid cell */
    transform: scale(0.4) translate(-70px, -65px); /* Scale down slightly if needed */
    cursor: pointer; /* Add cursor pointer for clickable items */
}

.rule-viz:hover .inner-hex { /* Add a slight hover effect */
    border-color: #FFF;
}

/* --- Neighbor Count Rule Visualization --- */
.neighbor-count-rule-viz {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 8px 5px;
    border: 1px solid #444;
    border-radius: 4px;
    cursor: pointer;
    background-color: #282828;
    transition: background-color 0.2s ease;
    min-height: 80px; /* Min height for consistency */
    box-sizing: border-box;
}
.neighbor-count-rule-viz:hover {
    background-color: #3a3a3a;
}
.neighbor-count-rule-viz .hexagon.center-hex {
    position: relative; /* Not absolute within this context */
    transform: scale(0.8) translate(-53px, -53px);
    margin-bottom: 5px;
    /* Ensure width/height are applied if base .hexagon doesn't */
    width: 40px;
    height: calc(40px * 1.154701);
}
.neighbor-count-label {
    font-size: 0.75em;
    text-align: center;
    color: #ccc;
    margin-top: 3px;
    line-height: 1.2;
}


/* --- Hexagon Base Styles (Pointy-Top using CSS Clip Path) --- */
.hexagon {
    position: absolute;
    width: 40px; /* Base size - Adjust if needed */
    height: calc(40px * 1.154701); /* height = width * 2 / sqrt(3) ≈ width * 1.1547 */
    /* Pointy-top polygon */
    clip-path: polygon(0% 50%, 25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%);
    background-color: #555; /* Default/fallback */
    box-sizing: border-box;
}

/* Hexagon States (Remain the same) */
.hexagon.state-0 {
    background-color: #404040; /* Darker grey for inactive */
}
.hexagon.state-1 {
    background-color: #FFFF00; /* Yellow for active */
}
.hexagon.state-2 { /* For "mixed" states, primarily for inner-hex in neighbor-count view */
    background: linear-gradient(45deg, #633030, #306330); /* Darker mixed colors */
}


/* Center Hexagon (Remains the same - centered) */
.center-hex {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(1.0); /* Slightly larger center */
    z-index: 1;
}

/* Inner Hexagon (Result - Adjust height calculation if base width changed) */
.inner-hex {
    width: 60%;
    height: calc(60% * 1.154701); /* Maintain aspect ratio */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.8);
    border: 1.0px solid #CCCCCC; /* ALWAYS show border */
    z-index: 2; /* Above center hex */
    transition: background-color 0.2s ease, border-color 0.2s ease; /* Smooth transition */
}
.inner-hex.state-0 { background-color: #990000 !important; } /* Use important to override base if needed */
.inner-hex.state-1 { background-color: #00BB00 !important; }
.inner-hex.state-2 {
    background: linear-gradient(45deg, #700000, #005000) !important; /* Darker mixed colors */
    border-color: #888 !important;
}


/* Neighbor Hexagons Positioning (Pointy-Top Arrangement) */
/* Adjust scale and offsets as needed for visual appeal */
.neighbor-hex {
    /* Scale neighbors down slightly */
    /* Center the scaled neighbor on its target position */
    transform-origin: center center;
    transform: translate(-50%, -50%) scale(0.9);
}
/* Standard neighbor order: 0:SE, 1:NE, 2:N, 3:NW, 4:SW, 5:S */
/* Positions are % of the .rule-viz container (100x110px approx) */
/* Fine-tune these percentages for best visual fit */
.neighbor-0 { top: 70%; left: 23%; }   /* Bottom-left */
.neighbor-1 { top: 31%; left: 23%; }   /* Top-left */
.neighbor-2 { top: 12%; left: 50%; }   /* Top */
.neighbor-3 { top: 31%; left: 78%; }   /* Top-Right */
.neighbor-4 { top: 70%; left: 78%; }   /* Bottom-Right */
.neighbor-5 { top: 88%; left: 50%; }   /* Bottom */


/* Inline hexagons for the explanation text (Update clip-path and height) */
.inline-hex {
    display: inline-block;
    width: 1em; /* Size relative to text */
    height: calc(1em * 1.154701); /* Pointy-top aspect ratio */
    /* Pointy-top polygon */
    clip-path: polygon(0% 50%, 25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%);
    vertical-align: middle;
    margin: 0 2px;
    position: relative; /* Needed for inner hex */
    box-sizing: border-box;
}
.inline-hex-inner {
    position: absolute;
    display: inline-block;
    width: 60%;
    height: calc(60% * 1.154701); /* Pointy-top aspect ratio */
     /* Pointy-top polygon */
    clip-path: polygon(0% 50%, 25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%);
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    border: 1px solid #CCCCCC;
    box-sizing: border-box;
}
/* State colors remain the same for inline hex explanation */
/* .inner-hex.state-0 { background-color: #990000; } -- These are general, apply specific below if needed */
/* .inner-hex.state-1 { background-color: #00BB00; } */
.inline-hex.state-0 { background-color: #404040; }
.inline-hex.state-1 { background-color: #FFFF00; }
.inline-hex-inner.state-0 { background-color: #990000 !important; }
.inline-hex-inner.state-1 { background-color: #00BB00 !important; }

/* Added styles for slider value display */
.slider-container {
    position: relative; /* Establishes a positioning context for the span */
    display: inline-flex; /* Aligns slider and potential future elements */
    align-items: center; /* Vertically centers items if needed */
    /* Adjust width if necessary, or let the input define it */
    /* e.g., width: 150px; */
}

.slider-container input[type="range"] {
    /* Ensure the input itself doesn't have extra padding that pushes the span away */
    /* If the container has a fixed width, make the slider take it up: */
    /* width: 100%; */
    vertical-align: middle; /* Keeps slider aligned with labels etc. */
}

.slider-container span {
    position: absolute; /* Position the span relative to the .slider-container */
    left: 50%;          /* Center horizontally */
    top: 50%;           /* Center vertically */
    transform: translate(-50%, -50%); /* Fine-tune centering */
    color: #FFFFFF;     /* White text for visibility */
    font-size: 0.8rem;    /* Smaller font size to fit inside */
    font-family: Arial, sans-serif; /* A clear, legible font */
    pointer-events: none; /* Allows clicks to pass through to the slider */
    z-index: 2;         /* Ensure the text is above the slider track */
    text-shadow: 0px 0px 3px rgba(0,0,0,0.9); /* Shadow for better readability */
    padding: 1px 3px;   /* A little padding around the text */
    /* background-color: rgba(0,0,0,0.3); /* Optional: Slight background for contrast */
    /* border-radius: 2px; */
}

/* Ensure existing biasSlider vertical alignment works with the new container */
#group-ruleset .bias-controls .slider-container {
    vertical-align: middle;
}

/* --- End of added styles --- */

/* Make sure to place these before any @media queries if you want them to be general,
   or inside specific media queries if they need to be responsive. */

.hidden {
    display: none !important;
}